A set of things(nodes/vertices)
    and the relationships(edges) between the nodes
        there can also be no relationships between all or some of the nodes

Formal(graph theory) definition:
    A pair of sets (V, E) where
        V is a set of vertices/nodes
        E is a set of 2-item subsets of V

Edges:
    (N -1)Â² = the number of edges in a graph with all vertices connected.
        
Types:
    - undirected: edges have no direction
        example:
            y connected_to x = x connected_to y
            y - x = y - x [`-` = connected_to]
            therefore: bidirectional 

    - directed(digraph): edges have direction
            example:
                y connected_to x != x connected_to y
                y -> x != x -> y
                therefore: unidirectional

    - weighted: edges have weights(the weights can represent arbitary values(distance, cost, strength etc))
                can be either directed or undirected
    
    - Special graphs (concepts represented as graphs)[many more exist]:
        - Tree
        - Rooted Tree
            In-Tree
            Out-Tree
        - Directed Acylic Graph(DAG)
        - Cyclic Graphs
        - Bipartite Graph
        - Complete Graph (i.e. connected graph)

Representations:    
    - Adjacency list
        Node stores:
            name
            its data (optional)
            list nodes it is connected to

        example: #python
            class Node:
                name = ""
                connections = [] #type Node

            class Graph
                nodes = [] #type Node

    - Adjacency matrix,
        N * N matrix(m), where N is number of nodes
        Truth value at m[i][j] = edge between node i and j
        
            00001
            00100
            10101
            01101

    - Edge list
