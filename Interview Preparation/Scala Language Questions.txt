What is the difference between a var, a val and def?
    var is a keyword for creating mutable object pointers (also known as variables)
    val is a keyword for creating immutable object pointers
    def is a keyword for functions or methods

What is a class?
    It is a self contained construct that encapsulates its data and behaviour that allows us 
    to model representations of entities.

What is the difference between a trait and an abstract class?
    1. traits
        Traits according to Martin, the craetor or Scala are fundamental elments of code reuse in the language.
        They are a construct that can encapsulate fields and fucntions that can be reused by mixing them into classes and objects

        e.g InvestorFacade
            encapsulate dealing with person and organisation investor types

        We often use them to define abstract contracts that are implemented by classes/objects
        e.g. PaymentClient for aa api-payment
            trait PaymentClient {
                def retrievePayment(id: Int): Payment
                def createPayment(payment: Payment): Payment
            }

            trait PaymentRestClient() extends PaymentClient

    2. abstract class
        a class that has unimplemented members;(often method members??)
    
    Differences of trait and classes (not just abstract classes)
        - classes can have class constructor parameters ** traits cannot have constructor parameters
        - super.method (e.g. super.toString) on a class are statically bound(meaning we know at compile time which
        super class' implementation of toString will be invoked ) ** traits super.method is dynamically bound(
            we only know at runtime when the trait is mixed into a concrete class, which implementation of super.toString will be called
            {The super class of the class it was mixed into})
                => This makes us able to use traits as stackable modifications


    trait properties    
        - they define a type
            trait Philosophize
            val frog: Philosophize

        - linearization
            class Animal
            trait Furry extends Animal
            trait HasLegs extends Animal
            trait FourLegged extends HasLegs
            class Cat extends Animal with Furry with FourLegged


    Abstract class                          | Trait
        - Can have classs constructor parameters             | - Cannot have constructor parameters
        - `super` method invocations are bound statically    | - `super` method invocations are bound dynamically
            => Why do we care about this?
        - cannot be extended from a class that only inherits | - Can be mixed into a class that already inherits from
        from another class                                       from another class


 
What is the difference between an object and a class?

    An object( the Singleton object) is construct that allows programemrs to encapsulate behaviour that is not specific to any specific class

In OOP an object is a specific instance of a class with the members populated with some specific values.

    A class is construct used to model our representations of concepts
        e.g. If we wanted to model a Payment it would have the following members
            Id,
            amount,
            currency
            sourceAccount
            destinationAccount

    We could add behaviour to this class as well, but we often don't do this when following a functional 
    programming approach because this lends itself to mutating the class state.
    Introducint mutable state introduces a lot of complexity because the class objects can
    be different at different moments in the program, which affects how the program behaves.

    This also introduces a lot of mental overhead on the programmer to reason about the behaviour
    of the program

    Differences
    
    Object                   | class
    Cannot be instantiated   | Can be instantiated

What is a case class?

    A syntactic sugar construct that allows programmers to define only the class constructor parameter.
    The Scala compiler then generates a lot of the boilerplate code such as 
    equality
    toString etc.
    no need for new keyword
    copy method?

What is the difference between a Java future and a Scala future?
    Java Future => blocks the current thread to get the result from the Future using the `get` method
    Scala Future: Allows for true asynchronous computation by allowing us to attach failure/success callbacks for completion and NOT block the current thread
    EXAMPLE???

What is the difference between unapply and apply, when would you use them?

    Methods that can be applied to Function types (Function1.....Function22)

    apply => allows you to specificy what should be done with a function's parameters
             
             called an injection

    unapply => allows you to define custom pattern matching by stipulating
               how values should be taken apart when pattern matching encouters a 
               pattern referencing your Extractor object in whhich your implementation of unapply is defined.
               
               called an extraction

            EXAMPLE (from programming in Scala book)
                object Email {

                    //takes apart an email address
                    def unapply(value: String):  (String, String) = {
                        val parts = value split "@"
                        if(parts.length == 2) (parts(0), parts(1)) else None
                    }
                }

What is a companion object?

What is the difference between the following terms and types in Scala: Nil, Null, None, Nothing?


What is Unit?

What is the difference between a call-by-value and call-by-name parameter?


How does Scala's Stream trait levarages call-by-name?

Define uses for the Option monad and good practices it provides.

How does yield work?

Explain the implicit parameter precedence.

What operations is a for comprehension syntactic sugar for?

Streams:
What consideration you need to have when you use Scala's Streams?

What technique does the Scala's Streams use internally?