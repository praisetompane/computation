
Your key weapon: Hash table
    * O(1)
    * O(logₙ)
    * O(N)
    * O(Nlogₙ)
    * O(N²)
    * O(N³)
    * (2ⁿ)

    * O(1): no optimisation needed
    
    * O(N²):
        How do you explore n² combinations in N time(i.e. in one iteration = O(N))?


            1. Change from:
                    iterating(exploring) with an index
                        using the index to extract a value
                        and doing some work
                TO
                    iterating(exploring) with a value
                        using the value to do the work
                            if it is a valid value in your universe(i.e. datastructure)
                SO
                    once you have a value
                    you can ask your iterale => Do you have thsi value?

            Example
                Given 
                    nums = [2,9,4,7]
                Objective
                    find possible pair that generates a sum (T)

                Then: iterating(exploring) with an index looks like this:
                    for indexI to length of nums                        : iterating(exploring) with index
                        for indexJ = indexI + 1 to length of nums       : iterating(exploring) with index
                            if nums at indexI + nums at indexJ == T     : using the index to extract a value
                                return nums at indexI and indexJ        : and doing some work
                    ∴ O(N²)

                Then: iterating(exploring) with a value
                    for indexI to length of nums   
                        create a map where
                            the key is the value
                            {key -> value} : key = value, value = arbitary data(maybe the index)

                            {
                                2 -> 0
                                9 -> 1
                                4 -> 2
                                7 -> 3 
                            }
                    for indexI to length of nums 
                        other addend = T - nums at indexI 
                        if other addend is in map
                            return other addend's value in map(i.e. index) and indexI
                    
                    ∴ O(N) + O(N) => O(N2) => O(N)
                        the term that increases the complexity of the problem the most is N
                        ∴ discard the 2
