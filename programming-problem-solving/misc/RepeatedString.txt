
Repeat `string` n times

    1 to n.toList.map(_ => )

Find occurences of `a`
    filter when letter = `a`


result = string.split()
occurences = result.filter(l => l == "a").length * n

==================================

generate n characters
    following the base pattern


=== SOL

I'll explain here with an example, suppose the input is:

    aba
    10

n = 10,  
means the string s = "aba" 
is repeated over the course of 10 letters, 
i.e. abaabaabaa. Now, we break this string further down. 
First part, the exactly divisible part, 
s1 = "abaabaaba" and the second part, 
the remainder part, s2 = "a". 
To represent the count of a in s1 and s2, we have, 
int(n/len(s)) or n//len(s) and s[:n%len(s)], multiplied by count of a in s, respectively.

========
aba
10

abaabaabaa

s1 = abaabaaba
s2 = a

whole


