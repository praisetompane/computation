What is it?
    A set of things(nodes/vertex)
        and the relationships(edges) between the nodes
            there can also be no relationships between all or some of the nodes
    Formal(graph theory) definition:
        A pair of sets (V, E) where
            V is a set of vertices/nodes
            E is a set of 2-item subsets of V
    Types:
        - undirected: edges have no direction
            example:
                y connected_to x = x connected_to y
                y - x = y - x [`-` = connected_to]
                therefore: bidirectional 

        - directed(digraph): edges have direction
                example:
                    y connected_to x != x connected_to y
                    y -> x != x -> y
                    therefore: unidirectional

        - weighted: edges have weights(the weights can represent arbitary values(distance, cost, strength etc))
                    can be either directed or undirected
        
        - Special graphs (concepts represented as graphs)[many more exist]:
            - Tree
            - Rooted Tree
                In-Tree
                Out-Tree
            - Directed Acylic Graph(DAG)
            - Cyclic Graphs
            - Bipartite Graph
            - Complete Graph (i.e. connected graph)

    Representations:    
        - Adjacency list
            Node stores:
                name
                its data (optional)
                list nodes it is connected to

            example: #python
                class Node:
                    name = ""
                    connections = [] #type Node

                class Graph
                    nodes = [] #type Node

        - Adjacency matrix,
            N * N matrix(m), where N is number of nodes
            Truth value at m[i][j] = edge between node i and j
            
                00001
                00100
                10101
                01101

        - Edge list

Performance Analysis:
    How fast is it to peform the operation? (i.e. Time Complexity)
        => Measured in terms of the number of steps it takes to complete the operation

    Read: Looking up something from a particular spot in the datastructure
        Steps = 

    
    Search: Looking for a particular value in te datastructure

        Breadth First Search
            Starting at a node
                explore all its nieghbours
                before moving on the next node(to explore all its nieghbours)
            Steps = O(V)

        Depth First Search
            Starting at a node
                explore each branch completely
                before moving on to next branch(to expplore it completely)
            
            Steps = O(V)

        Best Suited Use Cases
            Visit every node in graph => BFS and DFS
                NB: DFS simpler for this
            
            Determine path between two nodes (or shortest path) => BFS
                BFS to find an answer, first interrogates ALL nieghbours of a node X,
                    thus takes the shortest path to answering the question
                        as it relates to X
                DFS to find an answer, explores an increasily narrower branch of the graph rooted at node X
                    hence reduces the probability of find the answer, per search attempt
                        Because it narrows down search space, per attempt

        Example:
            0: 1, 3
            1: 3, 4

    Insert: Adding a value to the datastructure 
        Steps = 

    Delete: Removing a value from the datastructure
        Steps = 
