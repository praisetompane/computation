0. Can the incoming data structure be used to solve the problem?
    Is there a solution inherent in the structure itself already?

    e.g. repeated string problem
    https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

1. Can you rearrange the data in to a structure more suitable for the problem?

    e.g. SockMerchant.txt
    https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup


PATH PROBLEMS?
    Path finding
    Counting "events/things" in a path

2. Walk the problem space while simultaneously solving the problem
    as opposed to mapping out the whole problem space(i.e. the path) then solving the problem

    e.g. 
    JumpingOnTheClouds.txt
    https://www.hackerrank.com/challenges/jumping-on-the-clouds/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup


    CountingValleys.txt
    https://www.hackerrank.com/challenges/counting-valleys/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup


    
3.  Compute the final state without walking the whole path step by step
    i.e. Avoid O(N) implementation
    If the final state factor is defined(e.g. number of rotations)

    e.g. ArrayLeftRotation.txt
    
    https://www.hackerrank.com/challenges/ctci-array-left-rotation/copy-from/75481377?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays&isFullScreen=true

4. Given a jumbled state and an original state
   
   Q: How many operations did it take to get to jumbled state?
   A: Reverse to initial state and count operations required to rollback

   e.g. NewYearChaos.scala


5. Testing solutions
    base cases
    general cases
    error cases
    etc

6. many decision points => generate, print all
    possibilities
    exhaust a search space

    tool = backtrack


7. determining if object A is in group B
    We do NOT always need to generate the entire group B (This could be a big list)
    Can also determine if the rules that generate object A are a subset of the rules that generate group B
    
OPTMISATIONS NEEDED?
    Hash table
