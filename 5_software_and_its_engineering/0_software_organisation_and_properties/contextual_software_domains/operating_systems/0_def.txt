def operating system (or OS):
    formal:

        in words:
            collection of programs 
                with the objectives below (Scott, 2009:111):
                    - run the computer when it's turned on.
                        Q: What does it run at this stage?
                            What Instruction Code is executed?
                                Microcode?
                                see: https://media.ccc.de/v/34c3-9058-everything_you_want_to_know_about_x86_microcode_but_might_have_been_afraid_to_ask
                    - manage program lifecycle:
                        1. start program
                        2. allocate run time
                        3. terminate program

                    - provides services/routines to programs:
                        - I/O:
                            - print to screen
                            - read file
                            - connect to network
                            - ...
                        - ...

                        OS routines and program interaction:
                            - program 
                                - store OS routine parameters into registers
                                    NB: store its next instruction's address into last register
                                - jump to memory address with OS routine it needs
                            - OS:
                                - executes invoked/'called' routine
                                    using parameters stored in registers above
                                - jump to program's next instruction address    
                                    stored in last register
                            - program:
                                - execute next instruction
                                - ... continue execution

                        some reasons for this separation of concerns:
                            - enables easier application programming
                                as programmers do not need to know how IO and associated peripherals(screen, disk, etc) work.
                            - saves application memory by removing duplication .
                            - provides OS the chance to validate program authorization
                                to execute IO tasks.

                        NB: these routines are always loaded in RAM
            OS flow:
                loop while computer is on:
                    - is there something to input?
                    - is there something to output?
                    - is there a program that wants to run?
                
                if any of the questions is true
                    it executes requested task
                    then returns to loop

                loop is executed millions of times per second (10‚Å∂/s)
    plain english:

    intuition:

    examples:


References:
    Scott J.C. 2009. But how Do it Know? The Basic Principles of Computers for Everyone.