==============================================================================================================================================================
Research:
    - sources:
        - https://www.quantamagazine.org/computer-science/
        - What is Programming Languages Research?: https://www.youtube.com/watch?v=70_DFytfnWw
    - sub-areas:
        - ...
    - schools:
        - https://www.cs.utexas.edu/research/programming-languages-and-compilers
        - https://www.cs.cornell.edu/research/lang
        - https://www.mccormick.northwestern.edu/computer-science/research/areas/programming-languages.html
        - https://compiler-research.org/

    - build
        - What is Programming Languages Research?: https://www.youtube.com/watch?v=70_DFytfnWw

        - computer programming problems:
            - cracking the coding interview book
        - contribute to a programming language and its ecosystem: 
            - Python
                - CPython: https://github.com/python/cpython
                    - https://devguide.python.org
                - Flask: https://github.com/pallets/flask
                - Django
                    - complete a full tutorial app to learn/remember Django.
                    - Django Ecommece: https://www.youtube.com/watch?v=YZvRrldjf1Y
            - Scala
                - Scala 3 (Dotty): https://github.com/praisetompane/dotty
                - Play
                - Akka
        - https://github.com/praisetompane/algorithms_and_data_structures
    - study:
        - python
            - complete: /computation_and_information/language_template
                - Python essentials to be a Python software engineer
                - some things I found that I do not know:
                    - IO threads. select
                    - synchronous IO multiplexing
                    -   from socket import socket
                        socket.getpeername()
                        all()
            - write simplified interpreter and compiler for the language in the language
            - finish studying Python language reference
        - javascript AND typescript
            - html
            - css
            - complete: /computation_and_information/language_template
            - write simplified interpreter and compiler for the language in the language
        - go
            - complete: /computation_and_information/language_template
            - write simplified interpreter and compiler for the language in the language
        - c
            - complete: /computation_and_information/language_template
            - write simplified interpreter and compiler for the language in the language
        - rust:
            - complete: /computation_and_information/language_template
                - https://www.rust-lang.org
                - https://github.com/praisetompane/rust/tree/main
            - write simplified interpreter and compiler for the language in the language
        - java
            - complete: /computation_and_information/language_template
            - write simplified interpreter and compiler for the language in the language

            - scala
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
        - haskell
            - complete: /computation_and_information/language_template
            - write simplified interpreter and compiler for the language in the language
        - https://github.com/praisetompane/unified_discipline_of_programming
        - assembly
            - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-videos/lecture-4-assembly-language-computer-architecture
            - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-videos/lecture-4-assembly-language-computer-architecture
        - coq
        - pytorch
        - machine_code
            - x86
            - risc
        - verilog
            - https://www.chipverify.com/verilog/verilog-tutorial
            - https://inst.eecs.berkeley.edu/~eecs151/fa20/files/verilog/Verilog_Primer_Slides.pdf
            - https://web.mit.edu/6.111/www/f2017/handouts/L03_4.pdf
