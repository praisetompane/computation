Python programs are read by a parser
    the parsers accepts a stream of tokens as input (Python Software Foundation, 2023).

Lexical analyzer: generates stream of tokens from Python program text (Python Software Foundation, 2023).

Python Lexical Analysis (Python Software Foundation, 2023):
    Line structure:
        Python programs are divided into logical lines.
            defs:
                - logical line:
                    denoted by NEWLINE(\n) token.
                    constructed from one or more physical lines
                        following explicit and implicit line joining rules.
                    statements do not cross logical lines.
                        exceptions = {if the statement's syntax allows NEWLINEs}
                            e.g. compound statement: if..else

                - physical line:
                    -denoted by end-of-line sequence.
                        - supported sequences:
                            LF = Line Feed
                            CR = Carriage Return
                            CRLF = Carriage Return Line Feed
                    implicitly denoted by end of input.

                - blank lines:
                    logical
                        contains spaces, tabs, formfeeds and possibly a comment:
                            is ignored (i.e. does not generate NEWLINE token).

                        in read-eval-print loop (REPL): 
                            entirely blank logical line(i.e. contains nothing) 
                                terminates a multi-line statement [in CPython].

                - explicit line joining:
                    join two or more physical lines
                        into one logical line
                        with '\'.

                    the interpreter remove the '\' and end-of-line character.
                    
                    '\' properties:
                        - must be outside string or comment to work.
                        - line ending with it, cannot have a comment.
                        - can only be used to split string literals
                            across physical lines.
                            example:
                            if I wanted to set 'number' with value 342452423442245323234234342343432342
                                but its too long in the editor:
                                NB: This is illegal
                            number = 342452423442245323234234 \
                                        342343432342 
                                    
                        - illegal elsewhere on logical lines
                            except string literals. 
                            
                - implicit line joining:
                    join row or more physical lines
                        into one logical line
                        with '[]', '{}', '()' or '""" """'

                    properties:
                        - comments allowed at the end
                            - comment disallowed for '""" """'
                        - does not require explicit '\'
                        - blank line continuations are allowed
                        - indentation between continuation lines is not enforced
                        - does not generate NEWLINE token.

                - indentation:
                - comments:
                    - starts at beginning of logical line with a hash character(#).
                        the # must NOT be part of string literal.
                    - finishes at the end of physical.
                    - signify end of logical line
                        unless implicit line joining rules are invoked.
                    - ignored by the syntax.
                - encoding declarations:
                - white spaces between tokens:

References:
    Python Software Foundation. 2023. Lexical analysis. https://docs.python.org/3.11/reference/lexical_analysis.html#.