purpose: understand computation and information.

- priority:
    - learn
    - field update
- learn:
    - 0_foundations: what is computation? what can we compute? what can we not compute? why do we compute?:
        - 0_theory_of_computation: 1 hour
            - degree module: UNISA COS1501 | UNISA COS1512 
            - videos:
                - Theoretical Computer Science. : https://www.youtube.com/watch?v=OS33r2Fk8YQ&list=PLCqUsBXxq16yBaN_hpo7dY2l9N-ZLtI-X
                - Theory Of Computation: https://ocw.mit.edu/courses/18-404j-theory-of-computation-fall-2020/video_galleries/video-lectures/
            - readings: 
                - introduction_to_the_theory_of_computation_third_edition._michael_sipser.cengage_learning.pdf
                    - current position: Not Started
                - Stanford Encyclopedia of Philosophy. The Church-Turing Thesis. https://plato.stanford.edu/entries/church-turing/.
                    - current position: Forgot => Start Over => Not Started
            - recitations:
            - assignments:
            - exams:
    - 1_mathematics_of_computing: how is mathematics used to model computation or computational processes?: 1 hour
        - degree module: MIT { 6.1200[J] | 6.042J } | UNISA MAT2612 | UNISA MAT3707
        - videos: 
            - Mathematics of Computer Science: https://m.youtube.com/playlist?list=PLB7540DEDD482705B
        - readings: 
            - Epp, S.S. 2010. Discrete mathematics with applications. 4th ed. Cengage Learning. Boston, MA.
                current position: pg. 6, exercise 1.1, question 4
            - 6.1200[J]	Mathematics for Computer Science
                - current position: Lecture 1: Introduction and Proofs/Readings
        - recitations:
        - assignments:
        - exams:
    - 3_design_and_analysis_of_algorithms: 1 hour
        - degree module: MIT 6.1210
        - videos: 
            - Introduction To Algorithms:
                Demaine E. Devadas S. Introduction To Algorithms. 2011. https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/resources/lecture-4-heaps-and-heap-sort/.
                    - current position: Lecture 1: Algorithmic Thinking, Peak Finding
        - readings: 
        - recitations:
        - assignments:
        - exams:
    - 5_software_and_its_engineering/0_software_notations_and_tools: 2 hours
        - degree module: MIT 6.035
        - library:
            - MIT 6.035 Computer Language Engineering, Fall 2005
                NB: Compilers
                - in offline library
                - https://www.youtube.com/playlist?list=PL0300FE43396456C1

        - readings:
            - https://ocw.mit.edu/courses/6-035-computer-language-engineering-spring-2010/
            - https://ocw.mit.edu/courses/6-035-computer-language-engineering-spring-2010/pages/lecture-notes/
            - https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/pages/c11/
            - https://www.youtube.com/watch?v=F5-87RM_zHA&list=PLUl4u3cNGP62WVs95MNq3dQBqY2vGOtQ2&index=93&pp=iAQB
            - https://www.youtube.com/playlist?list=PLUl4u3cNGP62WVs95MNq3dQBqY2vGOtQ2
            - https://www.youtube.com/watch?v=yCd3CzGSte8&list=TLPQMjUwNzIwMjToaaZrcaOFcQ&index=2
            - https://ocw.mit.edu/courses/6-035-computer-language-engineering-sma-5502-fall-2005/
            - https://ocw.mit.edu/courses/6-035-computer-language-engineering-spring-2010/
            - https://www.youtube.com/playlist?list=PLUl4u3cNGP62WVs95MNq3dQBqY2vGOtQ2
            - https://github.com/praisetompane/computation_and_information/tree/main/5_software_and_its_engineering/0_software_notations_and_tools/unified_discipline_of_computer_programming
                - What is Programming Languages Research?: https://www.youtube.com/watch?v=70_DFytfnWw
            - python
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
                - finish studying Python language reference
            - c
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
            - assembly
                - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-videos/lecture-4-assembly-language-computer-architecture
                - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-videos/lecture-4-assembly-language-computer-architecture
            - machine_code: instruction sets
                - x86
                - arm
                - mibs
                - risc-v
                - cisc
            - verilog
                - https://www.chipverify.com/verilog/verilog-tutorial
                - https://inst.eecs.berkeley.edu/~eecs151/fa20/files/verilog/Verilog_Primer_Slides.pdf
                - https://web.mit.edu/6.111/www/f2017/handouts/L03_4.pdf
            - Unix: https://github.com/mit-pdos/xv6-riscv
            - Linux: https://github.com/torvalds/linux
            - javascript AND typescript
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
            - go
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
            - rust:
                - complete: /computation_and_information/language_template
                    - https://www.rust-lang.org
                    - https://github.com/praisetompane/rust/tree/main
                - write simplified interpreter and compiler for the language in the language
            - java
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
            - haskell
                - complete: /computation_and_information/language_template
                - write simplified interpreter and compiler for the language in the language
            - coq
            - pytorch

        - assignments:
        - exams:
    - 2_hardware: 2 hours
        - degree module:
        - library:
            - MIT 6.004 Computation Structures, Spring 2017
                - in offline library
                - https://www.youtube.com/playlist?list=PLUl4u3cNGP62WVs95MNq3dQBqY2vGOtQ2
            - MIT 6.172 Performance Engineering of Software Systems, Fall 2018:
            - https://www.youtube.com/playlist?list=PLUl4u3cNGP63VIBQVWguXxZZi0566y7Wf
        - readings:
            - https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/
            - but_how_do_it_know?_the_basic_principles_of_computers_for_everyone
        - assignments:
        - exams:
    - practice algorithms and data structure problem solving:
        - leet 75
        - hackerank
        - cracking the coding interview problems
        - programming competition problems
        - ...
- field update:
    - Quanta Magazine: https://www.quantamagazine.org/computer-science/
    - ACM DL: https://dl.acm.org : browse what is happening in computing.
    - Development: https://www.infoq.com/development/
    - Architecture & Design: https://www.infoq.com/architecture-design/
    - AI, ML & Data Engineering: 
        https://www.infoq.com/ai-ml-data-eng/
        https://read.deeplearning.ai/the-batch/
    - Culture & Methods: 
        - https://www.infoq.com/culture-methods/
    - DevOps: https://www.infoq.com/devops/
    - General:
        - https://www.ischools.org/news/categories/news
        - https://www.media.mit.edu
        - HackerNews:  https://news.ycombinator.com/news
==============================================================================================
- next:
    - 3_computer_systems_organization: 1 hour
        - degree module:
        - videos:
        - readings: 
        - assignments:
        - exams:

==============================================================================================
next:

timeline:
    see .plan.txt

legend:
    *: visited today/last session
        nb: all subjects must be visited before a repeat visit.

================================================completed================================================
2023-October-28: https://en.wikipedia.org/wiki/History_of_computer_science
                    
