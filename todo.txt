- 0_foundations/0_theory_of_computation:
    - lectures:
        - 1_models_of_computation and 2_formal_languages_and_automata_theory and 3_computational_complexity_and_cryptography:
            - Sipser, M. 2020. 18.404J - Theory of Computation. Massachusetts Institute of Technology
                - current: Lecture 1: 1. Introduction, Finite Automata, Regular Expressions: *
    - readings:
        - https://ocw.mit.edu/courses/18-404j-theory-of-computation-fall-2020/pages/readings/ :
            - Sipser, M. 2013. Introduction to the Theory of Computation. 3rd edition. Cengage Learning
        - 0_theory_of_computation/1_models_of_computation/0_computability:
            - Copeland, B. Jack, "The Church-Turing Thesis", The Stanford Encyclopedia of Philosophy (Winter 2024 Edition), Edward N. Zalta & Uri Nodelman (eds.). https://plato.stanford.edu/archives/win2024/entries/church-turing/
            - Alama, Jesse and Johannes Korbmacher, "The Lambda Calculus", The Stanford Encyclopedia of Philosophy (Winter 2024 Edition), Edward N. Zalta & Uri Nodelman (eds.), URL = <https://plato.stanford.edu/archives/win2024/entries/lambda-calculus/>. 
    - recitations: 
    - assignments:
        https://ocw.mit.edu/courses/18-404j-theory-of-computation-fall-2020/pages/assignments/
    - exams:
        https://ocw.mit.edu/courses/18-404j-theory-of-computation-fall-2020/pages/exams/

- 1_mathematics_of_computing:
    - lectures:
        - Leighton, T. van Dijk, M. 2010. 6042J - Mathematics for Computer Science. Massachusetts Institute of Technology
            - current: Lecture 1: Introduction and proofs: **
    - readings:
        - 6042J:
            - https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/pages/readings/
                - current:  Chapter 1: Propositions:
                            Chapter 2: Patterns of proof:
        - Epp, S.S. 2010. Discrete mathematics with applications. 4th ed. Cengage Learning. Boston, MA.
            - current position: pg. 6, exercise 1.1, question 4
        - Harvard School of Engineering and Applied Science. 2021. Lecture 16. Curry-Howard Isomorphism; Existential types, CS 152 - Programming Languages.
    - recitations:
        - 6042J
            - https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/pages/recitations/
                - current: 1	Logic, proving an implication
    - assignments:
        - 6042J
            - https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/pages/assignments/
                - current: 1
    - exams:
        - 6042J
            - https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/pages/exams/
                - current: N/A for now.

- 0_theory_of_computation/3_design_and_analysis_of_algorithms:
    - lectures:
        - Demaine, E., Ku, J., Solomon, J. 2020. 6.006 - Introduction to Algorithms. Massachusetts Institute of Technology
            - current: 1. Algorithms and Computation: ***
        - Demaine, E., Devadas, S, Lynch, N. 2015. 6.046J - Design and Analysis of Algorithms. Massachusetts Institute of Technology
            - current: N/A
        - Demaine, E. 2012. 6.851 - Advanced Data Structures. Massachusetts Institute of Technology
            - current: N/A
        - 1_algorithm_design_techniques
    - readings:
        - Wengrow J. 2017. A Common-Sense Guide to Data Structures and Algorithms: Level Up Your Core Programming Skills: ***
        - 6.006:
            - https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/pages/lecture-notes/
        - 6.046J:
            - 
        - 6.851:
            - 
        - Knuth, D. 1997. The Art of Computer Programming Volume 1 - Fundamental Algorithms. 3rd edition
        - Knuth, D. 1998. The Art of Computer Programming Volume 2 - Seminumerical algorithms . 3rd edition
        - Knuth, D. 1998. The Art of Computer Programming Volume 3 - Sorting and Searching. 2nd edition
        - Knuth, D. 1998. The Art of Computer Programming Volume 4A - Combinatorial algorithms Part 1
    - assignments:
        - 6.006:
            - https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/pages/assignments/
            - practice:
                - https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/pages/practice-problems/
        - 6.046J:
            - 
        - 6.851:
            - 
    - exams:
        - 6.006:
            - 
        - 6.046J:
            - 
        - 6.851:
            - 
    - quizzes: 
        - 6.006:
            - https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/pages/quizzes/
        - 6.046J:
            - 
        - 6.851:
            - 

- 5_software_and_its_engineering/0_software_notations_and_tools/1_general_programming_languages:
    - lectures:
        - CS107:         
            - Cain, J. 2025. CS107 - Computer Organization and Systems. Stanford University
                - https://web.stanford.edu/class/cs107/index
                - legacy: https://see.stanford.edu/course/cs107
                - current: Lecture 1: *
        - Van Roy, P. 2004. Concepts, Techniques, and Models of Computer Programming 
            - current: 1 Introduction to Programming Concepts pg 31
        - Bauer, A, Pretnar, M. The Programming Languages Zoo
    - readings:
        - 0_language_types:
            - CS107:
                - https://see.stanford.edu/course/cs107: Under the Resources section
            - machine_code: 
                - see: 3_computer_systems_organization/0_architectures/0_serial_architectures
            - 0_assembly_languages
                - assembly:
                    - lectures:
                        - Steinmeyer J.D., Wachman, S.Z.H. 6.1903 Introduction to Low-level Programming in C and Assembly. Massachusetts Institute of Technology
                        - Slonka, K., Hall, B.R. 2020. Assembly Programming and Computer Architecture for Software Engineers. 2nd Edition
                        - Leiserson, C., Shun, J. 2018. 6.172 - Performance Engineering of Software Systems. Massachusetts Institute of Technology
                            - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-videos/lecture-4-assembly-language-computer-architecture
                                Lecture 4: Assembly Language & Computer Architecture:
                                    - https://ocw.mit.edu/courses/6-172-performance-engineering-of-software-systems-fall-2018/resources/lecture-4-assembly-language-computer-architecture/
                                Lecture 5: C to Assembly
                                    - https://ocw.mit.edu/courses/6-172-performance-engineering-of-software-systems-fall-2018/resources/lecture-5-c-to-assembly/
                    - readings:
                        - https://github.com/brianrhall/Assembly
                        - Slonka, K., Hall, B.R. 2020. Assembly Programming and Computer Architecture for Software Engineers. 2nd Edition
            - 1_imperative_languages
                - c: https://github.com/praisetompane/c
                    - lectures:
                        - Severance, C. 2022. C Programming for Everybody
                        - Steinmeyer J.D., Wachman, S.Z.H. 6.1903 - Introduction to Low-level Programming in C and Assembly. Massachusetts Institute of Technology
                    - go: https://github.com/praisetompane/go
            - 2_functional_languages
                - haskell: https://github.com/praisetompane/haskell
                    - scala: https://github.com/praisetompane/scala[already learned, but could learn more including scala 3]
                    - proof assistants | languages with dependent types
                        - https://whatisrt.github.io/dependent-types/2020/02/18/agda-vs-coq-vs-idris.html
                        - idris: https://www.idris-lang.org:
                            - Brady E. 2017. Type Driven Development with Idris
                            - https://github.com/idris-lang/Idris2
                        - lean: https://github.com/praisetompane/lean
                            - source:
                                - https://github.com/leanprover
                        - coq: https://github.com/praisetompane/coq
                            - source:
                                - https://github.com/coq
            - 3_multiparadigm_languages
                - python: https://github.com/praisetompane/python
                    - Bennett, J. 2019. See CPython run - Getting to know your Python interpreter. North Bay Python: **
                    - Severance, C. 2014. Python for Everybody
                    - cpython
                        - study the cpython code base: https://github.com/praisetompane/python_implementation_study_cpython
                    - Kaptur, A. 2018. A Python Interpreter Written in Python
                    - Bennett, J. 2018. A Bit about Bytes - Understanding Python Bytecode. PyCon
                    - Ike-Nwosu, O. 2019. Inside The Python Virtual Machine
                    - mojo[after all python and the other languages are learned]
                        - superset: https://github.com/modularml/mojo
        - 1_language_features
            - Pierce, B.C. Types and Programming Languages. The MIT Press
            - Semantics Engineering with PLT Redex. https://redex.racket-lang.org/sewpr-toc.html
        - 3_computer_programming
            - Van Roy, P. 2004. Concepts, Techniques, and Models of Computer Programming
    - tools:
        - language modelling: https://github.com/runtimeverification/k
    - assignments:
        - CS107:
            - https://see.stanford.edu/course/cs107: Under the Assignments menu
    - exams:
        - CS107:
            - https://see.stanford.edu/course/cs107: Under the Exams menu
============================================================================================================
- next₁:
    - 5_software_and_its_engineering/2_software_creation_and_management:
        - lectures:
            - 0_designing_software
                - 1_software_design_engineering:
                    - Bell, A. Grimson, E. Guttag, J. 2016. 6.0001 - Introduction to Computer Science and Programming in Python. Massachusetts Institute of Technology
                    - Boning D.S., Chlipala A., Devadas S., Hartz A. 6.1010 - Fundamentals of Programming. Massachusetts Institute of Technology 
                    - Goldman M., Miller R.C. 2023. 6.1020 - Software Construction. Massachusetts Institute of Technology
                    - LaCurts, K. 2018. 6.1800 - Computer Systems Engineering. Massachusetts Institute of Technology
                    - Leiserson, C., Shun, J. 2018. 6.1060 - Software Performance Engineering. Massachusetts Institute of Technology
                    - Severance, C. 2016. Web Applications for Everybody
                - 2_software_design_trade_offs
                    - Leiserson, C., Shun, J. 2018. 6.1060 - Software Performance Engineering. Massachusetts Institute of Technology
        - readings:
        - assignments:
        - exams:

    - 0_theory_of_computation/0_logic
        - lectures:
            - Ben-David, S. 2015. CS 245 - Logic and Computation. University of Waterloo
        - readings:
        - assignments:
        - exams:

    - 5_software_and_its_engineering/0_software_notations_and_tools/2_compilers
        - lectures:
            - Aiken, A. 2025. SOE-YCSCS1 - Compilers. Stanford University
            - Leiserson, C., Shun, J. 2018. 6.172 - Performance Engineering of Software Systems. Massachusetts Institute of Technology
                - current: Lecture 9: What Compilers Can and Cannot Do
        - readings:
            - Nystrom, R. Crafting Interpreters. https://craftinginterpreters.com/contents.html
                - https://github.com/munificent/craftinginterpreters
            - Siek, J. 2023. Essentials of Compilation. https://github.com/IUCompilerCourse/Essentials-of-Compilation
            - Appel, A.W. 1997. Modern Compiler Implementation in C. Cambridge, UK: Cambridge University Press
            - Appel, A.W. 1997. Modern Compiler Implementation in ML. Cambridge, UK: Cambridge University Press
            - Appel, A.W. 1998. Modern Compiler Implementation in Java. Cambridge, UK: Cambridge University Press
            - Cooper, Keith, and Linda Torczon. Engineering a Compiler. San Mateo, CA: Morgan Kaufman, 2003. ISBN: 155860698X.
            - Muchnick, Steven. Advanced Compiler Design and Implementation. 1st ed. San Mateo, CA: Morgan Kaufman, 1997. ISBN: 1558603204.
            - Aho A., Lam M, Sethi R., Ullman J. Compilers - Principles, Techniques, and Tools. 2nd ed. Reading, MA: Addison-Wesley, 1986. ISBN: 0201100886.            
            - LLVM: https://www.llvm.org/docs/
        - assignments:
        - exams:
        - quizzes:
        - tools:
            - https://github.com/compiler-explorer/compiler-explorer

    - 2_hardware:
        - lectures:
            - Terman, C. 2017. 6.004 - Computation Structures. Massachusetts Institute of Technology
                - current: 1.2.1 What is Information: *
            - MITx's Circuits and Electronics XSeries Program:
                - series: https://www.edx.org/xseries/mitx-circuits-and-electronics
                - MITx: Circuits and Electronics 1: Basic Circuit Analysis
                    - https://www.edx.org/learn/circuits/massachusetts-institute-of-technology-circuits-and-electronics-1-basic-circuit-analysis
                - MITx: Circuits and Electronics 2: Amplification, Speed, and Delay
                    - https://www.edx.org/learn/circuits/massachusetts-institute-of-technology-circuits-and-electronics-2-amplification-speed-and-delay
                - MITx: Circuits and Electronics 3: Applications
                    - https://www.edx.org/learn/electronics/massachusetts-institute-of-technology-circuits-and-electronics-3-applications-2             
            - Eater, B. 2016. Building an 8-bit breadboard computer!
            - Eater, B. 2019. Build a 65c02-based computer from scratch
        - readings:
            - Scott J.C. 2009. But how Do it Know? The Basic Principles of Computers for Everyone
            - verilog | vdhl: https://github.com/praisetompane/verilog
                - https://web.mit.edu/6.111/www/f2017/handouts/L03_4.pdf
                - https://inst.eecs.berkeley.edu/~eecs151/fa20/files/verilog/Verilog_Primer_Slides.pdf
                - https://www.chipverify.com/verilog/verilog-tutorial
            - hardware integration | hardware-software integration | system integration: https://www.tea.blue/blog/hardware-software-integration-benefits/
        - assignments:
        - exams:
============================================================================================================
next₂:
    - 3_computer_systems_organization/0_architectures/0_serial_architectures
        - lectures:
        - readings:
            - 0_reduced_instruction_set_computing
                - RISC-V:
                    - https://github.com/riscv
                    - https://github.com/mit-pdos/xv6-riscv
             - 1_complex_instruction_set_computing
                - CISC
                    - x86
            - ARM
            - MIPS
            - source: https://crackmes.one
        - assignments:
        - exams:

    - 5_software_and_its_engineering/1_software_organization_and_properties/1_contextual_software_domains/operating_systems
        - lectures:
            - LaCurts, K. 2018. 6.033 - Computer System Engineering. Massachusetts Institute of Technology
                - https://ocw.mit.edu/courses/6-033-computer-system-engineering-spring-2018/pages/syllabus/
                - Week 1 - 4
            - Kanich, C. CS 361 Systems Programming. University of Illinois at Chicago
            - Donovan, J.J. 1972. Systems Programming
            - Katzan, H. 1970. Advanced Programming: Programming and Operating Systems.
        - readings:
            - Linux: https://github.com/torvalds/linux

    - 6_computing_methodologies/concurrent_computing_methodologies:
        - lectures:
        - readings:
        - assignments:
        - exams:

    - 6_computing_methodologies/parallel_computing_methodologies
        - lectures:
        - readings:
        - assignments:
        - exams:
    
============================================================================================================
next₃:
    - 6_computing_methodologies/artificial_intelligence:
        - lectures:
            - Broderick, T. 2020. 6.036 - Introduction to Machine Learning. Massachusetts Institute of Technology
            - Ben-David, S. 2015. CS 485-685 - Foundations of Machine Learning. University of Waterloo
            - Manning, C.D. 2024. CS224N - Natural Language Processing. Stanford University
            - Karpathy, A. 2022. Neural Networks - Zero to Hero
            - https://github.com/ahmedbahaaeldin/From-0-to-Research-Scientist-resources-guide
        - readings:
            - Daumé H. 2017. A Course in Machine Learning
            - pytorch
        - assignments:
        - exams:

    - 6_computing_methodologies/computer_graphics
        - lectures:
        - readings:
        - assignments:
        - exams:

    - 4_networks:
        - lectures:
            - LaCurts, K. 2018. 6.033 - Computer System Engineering. Massachusetts Institute of Technology
                - https://ocw.mit.edu/courses/6-033-computer-system-engineering-spring-2018/pages/syllabus/
                - Week 5 - 7
            - Severance, C. 2021. Internet History, Technology, and Security
        - readings:
        - assignments:
        - exams:
    
    - 6_computing_methodologies/distributed_computing_methodologies:
        - lectures:
            - LaCurts, K. 2018. 6.033 - Computer System Engineering. Massachusetts Institute of Technology
                - https://ocw.mit.edu/courses/6-033-computer-system-engineering-spring-2018/pages/syllabus/
                - Week 8 - 10
        - readings:
        - assignments:
        - exams:
        
============================================================================================================
next₄:
    - 6_computing_methodologies/symbolic_and_algebraic_manipulation:
        - lectures:
            - De Sterck, H. Ullrich P. 2006. AMATH 242/CS 371/CM 271 - Introduction To Computational Mathematics. University of Waterloo.
        - readings:
        - assignments:
        - exams:
    
    - 7_security_and_privacy:
        - lectures:
            - LaCurts, K. 2018. 6.033 - Computer System Engineering. Massachusetts Institute of Technology
                - https://ocw.mit.edu/courses/6-033-computer-system-engineering-spring-2018/pages/syllabus/
                - Week 11 - 14
        - readings:
        - assignments:
        - exams:
============================================================================================================
- next field template:
    - lectures:
    - readings:
    - assignments:
    - exams:
============================================================================================================
legend:
    *: SQ visit complete
    **: R1 visit complete
    ***: R2 visit complete
    ****: R3 visit complete
