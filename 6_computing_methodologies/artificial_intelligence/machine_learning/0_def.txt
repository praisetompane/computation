def 1: The field of study that gives computers
            the ability to learn without being explicitly programmed(Guttag, 2016).
        - Arthur Samuel, 1959

def 2: The science(and art) of programming computers to learn from data(Geron, 2019).
        Q: How do we program computers to LEARN from DATA?
            => mathematical algorithms

def 3(Geron, 2019): A machine is said to learn from experience E
        with respect to task T
        as measured by P
        IF, it improves the execution of T 
                as measured by P
                AFTER "experiencing" E
        E = data⁶

def 4:⁷ The study of algorithms
            that IMPROVE their performance
                at a task
                with experience(i.e. data)

            They optimize based on performance criterion
                using example data or past experience.

        Combination of techniques from Statistics and Computer Science
        
def training set: data used to train the the computer(Geron, 2019).
    def training instance(sample): each example in the training set


Example(Geron, 2019):
    Email Spam Flagging
        T := flag spam emails from incoming email
        E := training set with spam examples
        P := number of correctly classified spam/ total number of emails
            i.e. accuracy measure
            i.e. ratio of correctly flagged new email to total new email

Traditional Programming vs Machine learning(Kepner, 2020)(Domingos, 2015)

    Traditional Programming:
        Data ---->
                    Computer ----> Output
        Program ->

    Machine Learning:
        Output -->
                    Computer ----> Program
        Data ---->

        e.g. Output = Images, Data = Labels associated with the images
             Computer "figures" out the Program to allocate data to output(i.e. labels to images) would look like.

    What are the programs/algorithms the computer can use to "figure" out the program to
        associate, match etc data to output
        ANS: supervised, unsupervised, reinforcement learning
            refer 2_machine_learning_systems.txt for deeper look.

use cases:
    Use Case 1:
        Traditional Email Spam Flagging Programming Implementation(Geron, 2019)

            1. Identify patterns in Spam email.
                Words/Phrases used = {4U, Credit Card, Winner, Lucky Day}

            2. Write rules to detect patterns identified(in step 1).
                Flag email as spam if certain number of these patterns detected.

            3. Test and repeat Step 1 and 2 until implementation works.

            Pros:
                Precise rules based on seen examples

            Cons:
                Long and complex rules list
                    - difficult to:
                        - maintain
                        - update

            Flow:
                                                                Launch
                                                                    ↑ Pass Testing
                                                                    |
                Study The Problem --> Write The Rules --> Evaluate the Solution
                        ↑                                           |
                        |                                           ↓ Fail Testing
                        -------------Analyze The Errors--------------


        Machine Learning Email Spam Flagging Implementation(Geron, 2019):

            1. Gather email data
                Ham email
                Spam email

            2. Train ML model to flag spam
                - ML model identifies spam email patterns

            3. Test and repeat Step 1 and 2 until implementation works

            Flow:

                                        Email Data             Launch
                                            |                      ↑ Pass Testing
                                            ↓                      |
                Study The Problem --> Train ML Model --> Evaluate the Solution
                            ↑                                      |
                            |                                      ↓ Fail Testing
                            ----------Analyze The Errors-----------

            Pros:
                Simpler Code
            Cons:
                Rules are known by model and NOT explicit(given the current state of the art ~2022-March-28)

            Flow: Automatically Adapting To Change ML Model(Geron, 2019)

                        --------------Update Email Data <-------------- Launch
                        |                    |      {Automated Cycle}       ↑ Pass Testing
                        ↓                    ↓                              |
                        Email Data --> Train ML Model --> Evaluate the Solution
                    

    Broad Classes OF Machine Learning Suitable Problems(Geron, 2019):
        - Use Case 1 : Problems which requires creating and updating long list of rules or hand-tuning to solve.
        - Use Case 2: Complex Problems: Problems for which there is no good traditional programming solution.
            Speech Recognition
        - Use Case 3: Fluctuating Environments: Problems for which the data is constantly changing.
        - Use Case 4: Understanding complex problems or large volumes of data(i.e. data mining)
            - Some of the algorithms can be "unpacked" to see what they have "learned"
            - This can be used to study large amounts of data

                Study The Problem --> Train ML Model --> Evaluate the Solution
                        ↑                    ↑                     |
                        |                    |                     ↓
                        |            "Lots" of Data      Unpack Solution
                        |                                          |
                        |                                          ↓
                Iterate If Needed<-----------------------Understand Problem Better


References:
    - Guttag, J. 2016.  Lecture 4: Stochastic Thinking, 6.0002 - Introduction To Computational Thinking And Data Science. Massachusetts Institute of Technology.
    - Geron A. 2019. Hands On Machine Learning with Scikit Learn and TensorFlow. 2nd edition
    - Kepner, J., Gadepally, V. 2020. RES.LL-005 - Mathematics of Big Data and Machine Learning. Massachusetts Institute of Technology
    - Domingos, P. 2015. The Master Algorithm.
    - Geron A. 2019. Hands On Machine Learning with Scikit Learn and TensorFlow. 2nd edition, pg 5.