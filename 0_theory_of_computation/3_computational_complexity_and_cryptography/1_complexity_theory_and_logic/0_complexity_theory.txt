def complexity theory(Sipser. 2012:2):
    - formal: ???

        - in words: ???

    - plain english: 
        - deals with what makes some problems COMPUTATIONALLY HARD and others EASY.    
            NB: we don't have an answer yet(40+ years of research) (Sipser. 2012:2).
        - 
    - intuition: interested in what is computable in practice.

    - properties:
        - provides:
            elegant scheme for classifying problems according to computational difficulty (Sipser. 2012:2).
                using the scheme: 
                    we can demonstrate a METHOD for GIVING EVIDENCE
                        that a problem is computationally hard, even if we CAN'T PROVE it (Sipser. 2012:2).
        - research timeline: 1960 - present
        - connected to P vs NP.
        - measures of complexity: Time and Space/Memory.

    - examples: ???

    - use cases:
        - cryptography(Sipser. 2012:2): 
            - cryptography needs computationally difficult problems to design codes.
            - complexity theory helps identify the difficult problems.
            
    - proof: None. It is a field.

References:
    - Sipser, M. 2013. Introduction to the Theory of Computation. 3rd edition. Cengage Learning.
