What is it?
    An access provider
        to a random access datastructure(e.g. Array)
        using an arbitary key

Concepts related to it:
    Hash function = a computation that takes an arbitary key   
                    and returns an index into the random access datastructure
        NB: If this is written well:
                does not generate the same index(collision) for different arbitary inputs.
                This datastructure becomes very powerful
    Nested Chain =
        In the event of a collision
            an index stores a list of the items

    The analysis below is assuming you have minimal collision. C <= 5, C = collision

Performance Analysis:
    How fast is it to peform the operation? (i.e. Time Complexity)
        => Measured in terms of the number of steps it takes to complete the operation

    Read: Looking up something from a particular spot in the datastructure
        Steps = 1 step to compute index from arbitary key
                C steps to access index in random access datastructure

                O(1 + C) = O(C) = O(5) = O(1)
     
    Search: Looking for a particular value in te datastructure
        Steps = 1 step to compute index from arbitary key
                C steps to access index in random access datastructure

                O(1 + C) = O(C) = O(5) = O(1)

    Insert: Adding a value to the datastructure 
        Steps = 1 step to compute index from arbitary key
                1 step to insert at 
                    index in random access datastructure
                    or index/position in nested chain 

                O(1)

    Delete: Removing a value from the datastructure
        Steps = 1 step to compute index from arbitary key
                1 step to remove value at 
                    index in random access datastructure
                    or index/position in nested chain 
                O(1)