def stack(Wengrow, 2017:145-157):
    - formal:
        - ADT:
            - push
            - pop
            - peek
            - isempty

        - in words: a variable length sequence of values that only supports,
                        - adding an element to the top of the sequence: push
                        - removing an element at the top of the sequence: pop
                        - reading an element at the top of the sequence: peek

    - plain english: ???

    - intuition: a Last In, First Out(i.e. LIFO) access pattern over a sequence of values.

    - properties:
        - performance analysis:
            - How fast is it to perform the operation? (i.e. Time Complexity)
                => Measured in terms of the number of steps it takes to complete the operation

            Read: Looking up something from a particular spot in the data structure
                Steps =  1 step = O(1)
                        NB: The interface only supports accessing the top element.
                            Therefore you only look up the top value.

            Search: Looking for a particular value in the data structure
                Steps = N/A. The interface only supports accessing the top element.

            Insert: Adding a value to the data structure
                Steps = 2 steps to reappoint pointers = O(1)

            Delete: Removing a value from the data structure
                Steps = 2 steps to reappoint pointers = O(1)

    - examples: ???

    - use cases:
        - operations tracking: 0_theory_of_computation/4_design_and_analysis_of_algorithms/0_data_structures_design_and_analysis/0_data_structures/4_stack/use_cases/operations_tracker.py
            - undo
            - redo
            - current state
        - order reversal: 0_theory_of_computation/4_design_and_analysis_of_algorithms/0_data_structures_design_and_analysis/0_data_structures/4_stack/use_cases/order_reversal.py
        - symmetry validation: 0_theory_of_computation/4_design_and_analysis_of_algorithms/0_data_structures_design_and_analysis/0_data_structures/4_stack/use_cases/symmetry_validator.py

    - proof: ???

References:
    - Wengrow, J. 2017. A Common-Sense Guide to Data Structures and Algorithms - Level Up Your Core Programming Skills. Pragmatic Bookshelf