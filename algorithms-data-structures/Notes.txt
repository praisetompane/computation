Sorting
    Bubble sort => 
        swap the number highest/lowest number to the end(bubble it up)

    Insertion sort => 
        pick number and insert into correct position in target list
        shuffle numbers in target array if necessary

    Selection sort =>
        divide array into two conceptual parts
            sorted
            unsorted
        find smallest/highest
        swap it into the next index in the sorted array(with the number currently there)

        characteristics = 
            minimum swaps
            high comparisons : each number compared to each number in unsorted section

Data Structure points of analysis
    Speed and efficiency : Big O analysis
        array
        set
        hash table
    Code elegance and maintability
            stack
            queue
        These two are perfect for handling temporay data
        Handle data in an order
        Discard data when done

Stacks are useful for:
    - processing data in reverse order
    - undo operation
    - executing function calls in a networked application
        - the last one that came thrught must be ran 
            - it's output substituted in the second last function and so on...

Queues are perfect for:
    processing data in the order it was received
    handling asynchronous requests
    modelling patients for the doctor
    modelling planes waiting to take off

Recursion:
    Reading recursive code:
        1. Identify the base case ( function does not call itself)
        2. Read the function implementation as if you have the base case
        3. Read the function for the case right before the base case
        4. Progress the analysis by moving up one cae at a time
    Useful:
        - When you're repeating an algorithm within the same algorithm
        - Don't know upfront how many levels deep you need to dig into something