1. Why React?
    1.1. Composition (of components)
    1.2. Unidirectional Data Flow
    1.3. Declarative
    1.4. Explicit Mutations
    1.5. Just JavaScript 


    1.1. 
        - Components are units of abstraction and computation

    1.3 
        - Reduce side effects   
        - Minimise Mutability (in OUR code)
        - More readable code
        - Less bugs

React Ecosystem
    1. React
    2. React Router
    3. Webpaack
    4. Babel
    5. Axios


    1. library of UI components
    2. Map URLs to Components
    3. 
        Why does it exist?
        => It's a code bundler 
            : Takes Code -> Transforms them with a set of rules-> Output new version of code
       
        What problem is it solving?
        => e.g. conversion of code into format that a browser understanda (e.g. vanilla CSS, html or JavaScript)

        What does it need to work?
            1. Starting point of application (root JavaScript file)
            2. Transformations to apply (called loaders)
            3. Destination directory

            2. Install the loader (using npm), make sure it's for dev and added to Dependencies
                loader config entry needs:
                    -> file type to run against
                    -> the loader to run

        Setup steps
            1. Create config file in project root folder
                -> webpack.config.js
            2. export module object with the configuration values
                -> This object has the definitions for the needs metioned at "What does it need to work?"

                module.exports = {
                    entry: '../app/index.js', //starting point
                    module: {
                        rules: [
                            {test: /\.coffe$, use: "coffee-loader"} // example transformation rule
                        ]
                    }    

                }
        
    
    4. Code Transformer
        -> Used by Webpaack in it's Transformations
        
        Possible Transformations(not exhaustive):
            - JSx to normal JavaScript
            - Newere JavaScript syntax to old (e.g classes)

    5. Gives us functionality to make Ajax requests
        Promise based http library


TOOLS
    NPM (Node Package Manager)
        - A way to easilty install modules without downloadin them manually
        - A way to easily updagrade those modules as well
        - Easier to share a project without shipping it with all the libraries it uses


    React Developer Tools
        Inspect Components
            - state, props etc


STARTING A NEW PROJECT

1. npm init
2. app folder structure and base files (index.js, index.html, index.css)
3. install React
    npm install --save react
    npm install --save react-dom
4. Setup Webpaack
    npm install --save-dev path
    npm install --save-dev babel-core 
    npm install --save-dev babel-loader 
    npm install --save-dev babel-preset-env 
    npm install --save-dev babel-preset-react 
    npm install --save-dev css-loader 
    npm install --save-dev style-loader 
    npm install --save-dev html-webpack-plugin 
    npm install --save-dev webpack 
    npm install --save-dev webpack-dev-server